/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.photostorage;

import com.mycompany.photostorage.entity.Device;
import com.mycompany.photostorage.entity.Typeofdevice;
import com.mycompany.photostorage.util.HibernateUtil;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import org.hibernate.Query;
import org.hibernate.Session;

/**
 * Category which allows user to add new Device to database
 * @author m_lig
 */
public class AddDevicePanel extends javax.swing.JPanel {

    /**
     * Main frame of the program
     */
    private MainProgramFrame frame;

    /**
     * Creates new form AddDevicePanel
     *
     * @param frame JFrame being parent swing component
     */
    public AddDevicePanel(MainProgramFrame frame) {
        this.frame = frame;
        initComponents();
        setItemModelSelect();
        addDevices();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        typesComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        deviceNameComboBox = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();

        jLabel1.setText("Device's name:");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Choose device's type:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Add device");
        jLabel3.setPreferredSize(new java.awt.Dimension(82, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(104, 104, 104))
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(typesComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(204, 204, 204)
                        .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deviceNameComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(35, 35, 35))
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deviceNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24))
        );

        jLabel2.getAccessibleContext().setAccessibleName("");
        deviceNameComboBox.getAccessibleContext().setAccessibleName("");
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Function fired when Add button is pressed, adds device to DB
     * @param evt 
     */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        String[] selectedDeviceNameParts = deviceNameComboBox.getSelectedItem().toString().split(" ");
        String deviceName = "";
        for (int i = 0;i<selectedDeviceNameParts.length-1;i++) {
            deviceName = deviceName+selectedDeviceNameParts[i] +" ";
        }      
        deviceName = deviceName.substring(0, deviceName.length() - 1);
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query query = session.createQuery("from Device");
        List<Device> devices = new ArrayList<>();
        devices = query.list();
        for (Device device : devices) {
            if (device.getName().equals(deviceName)) {
                JOptionPane.showMessageDialog(this,
                        "Device already exists",
                        "Warning",
                        JOptionPane.INFORMATION_MESSAGE);
                session.getTransaction().commit();
                session.close();
                return;
            }
        }
        Device dev = new Device();
        File[] files = File.listRoots();
        File currentDevice = files[0];
        for (File file : files) {
            if (FileSystemView.getFileSystemView().getSystemDisplayName(file).equals(deviceNameComboBox.getSelectedItem().toString())) {
                currentDevice = file;
                break;
            }
        }        
        dev.setName(deviceName); 
        dev.setCapacity(Long.toString(currentDevice.getTotalSpace()));
        dev.setFreeSpace(Long.toString(currentDevice.getFreeSpace()));
        dev.setIsStoring((byte) 0);
        query = session.createQuery("from Typeofdevice");
        List<Typeofdevice> types = new ArrayList<>();
        types = query.list();
        for(Typeofdevice type : types) {
            if(type.getDescription().equals(typesComboBox.getSelectedItem().toString())) {
                dev.setTypeofdevice(type);
                break;
            }
        }
        session.save(dev);
        session.getTransaction().commit();
        session.close();
        JOptionPane.showMessageDialog(this,
                        "Device successfully added!",
                        "Information",
                        JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_addButtonActionPerformed

    /**
     * Function fired when Cancel button is pressed, goes to previous JPanel
     * @param evt 
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        frame.setPanel(new PhotoViewPanel(frame, frame.getCurrentUser()));
    }//GEN-LAST:event_cancelButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox<String> deviceNameComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox<String> typesComboBox;
    // End of variables declaration//GEN-END:variables

    /**
     * Select TypeOfDevice from database and add it to comboBox
     */
    private void setItemModelSelect() {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query query = session.createQuery("from Typeofdevice");
        ArrayList<Typeofdevice> tod = (ArrayList<Typeofdevice>) query.list();
        for (Typeofdevice device : tod) {
            typesComboBox.addItem(device.getDescription());
        }
        session.getTransaction().commit();
        session.close();
    }

    /**
     * Add name of connected devices to ComboBox
     */
    private void addDevices() {
        File[] files = File.listRoots();
        String names;
        for (File file : files) {
            names = FileSystemView.getFileSystemView().getSystemDisplayName(file);
            deviceNameComboBox.addItem(names);
        }
    }

}
