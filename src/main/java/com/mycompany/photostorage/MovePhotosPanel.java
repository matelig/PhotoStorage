/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.photostorage;

import com.mycompany.photostorage.entity.Device;
import com.mycompany.photostorage.entity.Photo;
import com.mycompany.photostorage.util.HibernateUtil;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileSystemException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import org.hibernate.Query;
import org.hibernate.Session;

/**
 * JPanel providing interface allowing to move photos to chosen device
 *
 * @author Rafa≈Ç Swoboda
 */
public class MovePhotosPanel extends javax.swing.JPanel {

    /**
     * Program frame
     */
    private MainProgramFrame frame;
    /**
     * Reference to current panel
     */
    final javax.swing.JPanel panel = this;
    /**
     * List of photos
     */
    private List<Photo> photos = new ArrayList<>();
    /**
     * List of not moved photos
     */
    private List<Photo> notMovedPhotos = new ArrayList<>();
    /**
     * Set of devices that need to be connected
     */
    private Set<String> devicesToConnect = new HashSet<>();
    /**
     * Panel with wait information
     */
    private JOptionPane pleaseWaitPane = new JOptionPane("Work in progress. Please wait.",
            JOptionPane.INFORMATION_MESSAGE,
            JOptionPane.DEFAULT_OPTION, null,
            new Object[]{});
    /**
     * Wait dialog
     */
    private JDialog waitDialog;

    /**
     * Creates new form MovePhotosPanel
     *
     * @param frame parent frame
     * @param photos list of photos to move
     */
    public MovePhotosPanel(MainProgramFrame frame, List<Photo> photos) {
        this.frame = frame;
        this.photos = photos;
        initComponents();
        fillComboBox();
    }

    /**
     * Creates list of available devices, select from database
     */
    public final void fillComboBox() {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query query = session.createQuery("from Device");
        List<Device> devices = new ArrayList<>();
        devices = query.list();
        for (Device device : devices) {
            devicesComboBox.addItem(device.getName());
        }
        session.getTransaction().commit();
        session.close();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        devicesComboBox = new javax.swing.JComboBox<>();
        cancelButton = new javax.swing.JButton();
        acceptButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        acceptButton.setText("Accept");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Choose device:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(cancelButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(acceptButton))
                        .addComponent(devicesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(89, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(devicesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(acceptButton))
                .addContainerGap(25, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Moves given photos to selected device. Shows if device is not available
     *
     * @param evt
     */
    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        prepareDialog();
        new Thread(new Runnable() {
            @Override
            public void run() {
                File[] files = File.listRoots();
                String name;
                String destination = "";
                String deviceName = devicesComboBox.getSelectedItem().toString();
                List<Device> databaseDevices;
                Device currentDevice = null;
                boolean found = false;
                boolean deviceNotConnected = false;
                boolean fullDevice = false;
                for (int i = 0; i < files.length; i++) {
                    name = FileSystemView.getFileSystemView().getSystemDisplayName(files[i]);
                    String[] devicePartName = name.split(" ");
                    name = "";
                    for (int j = 0; j < devicePartName.length - 1; j++) {
                        name = name + devicePartName[j] + " ";
                    }
                    name = name.substring(0, name.length() - 1);
                    if (name.equals(deviceName)) {
                        destination = files[i].getAbsolutePath();
                        found = true;
                        break;
                    }
                }
                File destinationDevice = new File(destination);
                if (found) {
                    Session session = HibernateUtil.getSessionFactory().openSession();
                    session.beginTransaction();
                    Query query = session.createQuery("from Device");
                    databaseDevices = query.list();
                    for (Device device : databaseDevices) {
                        if (device.getName().equals(deviceName)) {
                            currentDevice = device; //device do zapisu
                            break;
                        }
                    }
                    Set<Device> devices = new HashSet<>();
                    devices.add(currentDevice);
                    for (Photo photo : photos) {
                        File file = null;
                        boolean proceed = false;
                        List<Device> oldDevice = new ArrayList<>();
                        oldDevice.addAll(photo.getDevices());
                        String sourcePath = null;
                        if (photo.getIsArchivised() == 1) {
                            if (isDeviceConnected(oldDevice.get(0).getName())) {
                                sourcePath = getDeviceAbsolutePath(oldDevice.get(0).getName());
                                sourcePath = sourcePath + photo.getPath().substring(3, photo.getPath().length());
                                file = new File(sourcePath);
                                proceed = true;
                            } else {
                                notMovedPhotos.add(photo);
                                devicesToConnect.add(oldDevice.get(0).getName());
                                deviceNotConnected = true;
                            }
                        } else {
                            sourcePath = photo.getPath();
                            file = new File(photo.getPath());
                            proceed = true;
                        }
                        if (proceed) { //sprawdzanie, czy Device z ktorego chcemy przeniesc zdjecie jest dostepne
                            try {
                                Files.move(Paths.get(sourcePath), Paths.get(destination + file.getName()));//przenoszenie z literka
                                photo.setPath(destination + file.getName());
                                photo.setIsArchivised((byte) 1);
                                photo.setDevices(devices);
                                session.update(photo);
                                currentDevice.setFreeSpace(Long.toString(destinationDevice.getFreeSpace()));
                                session.save(currentDevice);
                            } catch (FileSystemException ex) {
                                notMovedPhotos.add(photo);
                                fullDevice = true;
                            } catch (IOException ex) {
                                ex.getStackTrace();
                                System.out.println("aejfawegg");
                            }
                        }

                    }
                    for (Device device : databaseDevices) {
                        if (isDeviceConnected(device.getName())) {
                            File file = new File(getDeviceAbsolutePath(device.getName()));
                            Long size = file.getFreeSpace();
                            device.setFreeSpace(Long.toString(size));
                            session.update(device);
                        }
                    }
                    session.getTransaction().commit();
                    session.close();
                    waitDialog.dispose();
                    if (!deviceNotConnected) {
                        if (!fullDevice) {
                            JOptionPane.showMessageDialog(panel,
                                    "Photo has been moved",
                                    "Success",
                                    JOptionPane.INFORMATION_MESSAGE);
                            frame.setPanel(new PhotoViewPanel(frame, frame.getCurrentUser()));
                        } else {
                            JOptionPane.showMessageDialog(panel,
                                    "Your target device is full",
                                    "Failure",
                                    JOptionPane.INFORMATION_MESSAGE);
                            frame.setPanel(new PhotoViewPanel(frame, frame.getCurrentUser()));
                        }
                    } else {
                        String namesOfDevice = "";
                        for (String s : devicesToConnect) {
                            namesOfDevice += s + " ";
                        }
                        if (!fullDevice) {
                            JOptionPane.showMessageDialog(panel,
                                    "Some devices have not been connected. Connect: " + namesOfDevice,
                                    "Warning",
                                    JOptionPane.INFORMATION_MESSAGE);
                            frame.setPanel(new MovePhotosPanel(frame, notMovedPhotos));
                        } else {
                            File file = new File(destination);
                            JOptionPane.showMessageDialog(panel,
                                    "Some devices have not been connected. Connect: " + namesOfDevice
                                    + "\n" + FileSystemView.getFileSystemView().getSystemDisplayName(file) + " is full.",
                                    "Warning",
                                    JOptionPane.INFORMATION_MESSAGE);
                            frame.setPanel(new MovePhotosPanel(frame, notMovedPhotos));
                        }
                    }
                } else {
                    waitDialog.dispose();
                    JOptionPane.showMessageDialog(panel,
                            "Device have not been found. Try to plug it in.",
                            "Warning!",
                            JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }).start();
        waitDialog.setVisible(true);
    }//GEN-LAST:event_acceptButtonActionPerformed

    /**
     * Method for checking if one of used devices is connected
     *
     * @param deviceName name of device in database
     * @return true if device found, false if is not connected
     */
    private boolean isDeviceConnected(String deviceName) {
        File[] files = File.listRoots();
        String name;
        for (int i = 0; i < files.length; i++) {
            name = FileSystemView.getFileSystemView().getSystemDisplayName(files[i]);
            String[] devicePartName = name.split(" ");
            name = "";
            for (int j = 0; j < devicePartName.length - 1; j++) {
                name = name + devicePartName[j] + " ";
            }
            name = name.substring(0, name.length() - 1);
            if (name.equals(deviceName)) {
                return true;
            }
        }
        return false;
    }

    /**
     * Method that returns path to choosen device
     *
     * @param deviceName name o device in database
     * @return string that contains path
     */
    private String getDeviceAbsolutePath(String deviceName) {
        File[] files = File.listRoots();
        String name;
        String destination = "";
        for (int i = 0; i < files.length; i++) {
            name = FileSystemView.getFileSystemView().getSystemDisplayName(files[i]);
            String[] devicePartName = name.split(" ");
            name = "";
            for (int j = 0; j < devicePartName.length - 1; j++) {
                name = name + devicePartName[j] + " ";
            }
            name = name.substring(0, name.length() - 1);
            if (name.equals(deviceName)) {
                destination = files[i].getAbsolutePath();
                break;
            }
        }
        return destination;
    }

    /**
     * Cancels operation and goes back to previous JPanel
     *
     * @param evt
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        frame.setPanel(new PhotoViewPanel(frame, frame.getCurrentUser()));
    }//GEN-LAST:event_cancelButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox<String> devicesComboBox;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    /**
     * Method that prepares waitDialog for use
     */
    private void prepareDialog() {
        waitDialog = pleaseWaitPane.createDialog(panel, "Please Wait");
        waitDialog.setContentPane(pleaseWaitPane);
        waitDialog.setModal(true);
        waitDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        waitDialog.pack();
        waitDialog.setLocationRelativeTo(panel);
    }
}
