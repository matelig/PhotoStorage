package com.mycompany.photostorage;

import com.mycompany.photostorage.entity.Photo;
import com.mycompany.photostorage.model.CurrentUser;
import com.mycompany.photostorage.util.HibernateUtil;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Set;
import javax.swing.JOptionPane;
import org.hibernate.Query;
import org.hibernate.Session;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.mycompany.photostorage.entity.Category;
import com.mycompany.photostorage.entity.Device;
import com.mycompany.photostorage.entity.User;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.swing.JFileChooser;

/**
 * JPanel used for triggering report generation, based on the report type chosen
 * by user.
 *
 * @author alachman
 */
public class GenerateReportPanel extends javax.swing.JPanel {

    private final CurrentUser currentUser;

    /**
     * Creates new form GenerateReportPanel
     *
     * @param user
     */
    public GenerateReportPanel(CurrentUser user) {
        this.currentUser = user;
        initComponents();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        radioBtnCategory = new javax.swing.JRadioButton();
        radioBtnArchived = new javax.swing.JRadioButton();
        radioBtnDevice = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnGenerate = new javax.swing.JButton();

        jLabel2.setText("Choose report type");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Generate report");
        jLabel1.setPreferredSize(new java.awt.Dimension(82, 20));

        buttonGroup.add(radioBtnCategory);
        radioBtnCategory.setText("category");

        buttonGroup.add(radioBtnArchived);
        radioBtnArchived.setText("archived");

        buttonGroup.add(radioBtnDevice);
        radioBtnDevice.setText("device");
        radioBtnDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnDeviceActionPerformed(evt);
            }
        });

        btnGenerate.setText("Generate report");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(206, 206, 206)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGenerate)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(radioBtnDevice)
                        .addGap(18, 18, 18)
                        .addComponent(radioBtnCategory)
                        .addGap(18, 18, 18)
                        .addComponent(radioBtnArchived)))
                .addContainerGap(163, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioBtnCategory)
                    .addComponent(radioBtnArchived)
                    .addComponent(radioBtnDevice))
                .addGap(38, 38, 38)
                .addComponent(btnGenerate)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void radioBtnDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnDeviceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioBtnDeviceActionPerformed

    /**
     * Method triggers report generation when a report type is selected.
     *
     * @param evt
     */
    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        if (buttonGroup.getSelection() == null) {
            JOptionPane.showMessageDialog(this,
                    "You have to select report type",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } else {

            chooseReportType();
        }
    }//GEN-LAST:event_btnGenerateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerate;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton radioBtnArchived;
    private javax.swing.JRadioButton radioBtnCategory;
    private javax.swing.JRadioButton radioBtnDevice;
    // End of variables declaration//GEN-END:variables

    /**
     * Method preparing report content for report based on device.
     *
     * @param session
     * @param document
     * @throws Exception
     */
    private void prepareReportForDevice(Session session, Document document) throws Exception {
        PdfPTable tablesup = new PdfPTable(6);
        tablesup.addCell("Lp.");
        tablesup.addCell("Category");
        tablesup.addCell("Path");
        tablesup.addCell("Resolution");
        tablesup.addCell("Description");
        tablesup.addCell("Format");

        Query sessionQuery = session.createQuery("from Device");
        java.util.List<Device> devices = new ArrayList<>();
        devices = sessionQuery.list();

        for (Device device : devices) {
            PdfPCell cell = new PdfPCell(new Paragraph(getParagraphForDevice(device)));
            cell.setColspan(8);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            cell.setBackgroundColor(BaseColor.LIGHT_GRAY);
            tablesup.addCell(cell);

            Set<Photo> photosOnDevice = device.getPhotos();
            photosOnDevice.stream().filter((photo
                    -> photo.getUser().getIdu().equals(currentUser.getUserID())));
            Iterator<Photo> iterator = photosOnDevice.iterator();
            int photoCounter = 0;
            while (iterator.hasNext()) {
                try {
                    Photo photo = iterator.next();
                    photoCounter++;
                    String v0 = photoCounter + ".";
                    String v1;
                    if (photo.getCategory() == null) {
                        v1 = "No category assigned";
                    } else {
                        v1 = photo.getCategory().getName();
                    }

                    String v2 = photo.getPath();
                    String v3 = photo.getResolution();
                    String v4 = photo.getDescription();
                    String v5 = photo.getFormat();
                    tablesup.addCell(v0);
                    tablesup.addCell(v1);
                    tablesup.addCell(v2);
                    tablesup.addCell(v3);
                    tablesup.addCell(v4);
                    tablesup.addCell(v5);

                } catch (Exception e) {
                    System.out.println("Exception: " + e.getLocalizedMessage());
                }
            }
        }
        document.add(tablesup);

    }

    /**
     * Method for getting report type based on radio buttons selection.
     *
     * @return String describing report type
     */
    private String getReportType() {
        if (radioBtnDevice.isSelected()) {
            return "device";
        } else if (radioBtnArchived.isSelected()) {
            return "archived";
        } else if (radioBtnCategory.isSelected()) {
            return "category";
        }
        return "";
    }

    /**
     * Method used for generating description of a device.
     *
     * @param device
     * @return
     */
    private String getParagraphForDevice(Device device) {
        StringBuilder builder = new StringBuilder();
        builder.append("Device name: ");
        builder.append(device.getName());
        builder.append("\n");
        builder.append("Device capacity: ");
        builder.append(device.getCapacity());
        builder.append("\n");
        builder.append("Device free space: ");
        builder.append(device.getFreeSpace());
        builder.append("\n");
        builder.append("Device type ");
        builder.append(device.getTypeofdevice().getDescription());

        return builder.toString();
    }

    /**
     * Method triggering report generation for current report type.
     */
    private void chooseReportType() {
        try {
            prepareReport();
            JOptionPane.showMessageDialog(this,
                    "The report was generated successfully!",
                    "Report for" + getReportType(),
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "There was an error during report generation: " + e.getMessage(),
                    "Report",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Method preparing report content for report based on archivisation state.
     *
     * @param session
     * @param document
     * @throws Exception
     */
    private void prepareReportArchive(Session session, Document document) throws Exception {

        PdfPTable tablesup = new PdfPTable(7);
        tablesup.addCell("Lp.");
        tablesup.addCell("Category");
        tablesup.addCell("Path");
        tablesup.addCell("Resolution");
        tablesup.addCell("Description");
        tablesup.addCell("Format");
        tablesup.addCell("Device name");

        PdfPCell cell = new PdfPCell(new Paragraph("Unarchivised"));
        cell.setColspan(8);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell.setBackgroundColor(BaseColor.LIGHT_GRAY);
        tablesup.addCell(cell);

        Query query = session.createQuery("from User where idu=" + currentUser.getUserID());
        User dbUser = (User) query.list().get(0);
        Set<Photo> photos = dbUser.getPhotos();
        Iterator<Photo> iterator = photos.iterator();
        int unarchivisedCounter = 0;
        while (iterator.hasNext()) {
            Photo photo = iterator.next();
            if (photo.getIsArchivised() == 0) {
                unarchivisedCounter++;
                String v0 = unarchivisedCounter + ".";
                String v1;
                if (photo.getCategory() == null) {
                    v1 = "No category assigned";
                } else {
                    v1 = photo.getCategory().getName();
                }

                String v2 = photo.getPath();
                String v3 = photo.getResolution();
                String v4 = photo.getDescription();
                String v5 = photo.getFormat();
                String v6 = "-";
                tablesup.addCell(v0);
                tablesup.addCell(v1);
                tablesup.addCell(v2);
                tablesup.addCell(v3);
                tablesup.addCell(v4);
                tablesup.addCell(v5);
                tablesup.addCell(v6);

            }
        }
        cell = new PdfPCell(new Paragraph("Archivised"));
        cell.setColspan(8);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell.setBackgroundColor(BaseColor.LIGHT_GRAY);
        tablesup.addCell(cell);
        iterator = photos.iterator();
        int archivisedCounter = 0;
        while (iterator.hasNext()) {
            Photo photo = iterator.next();
            if (photo.getIsArchivised() == 1) {
                archivisedCounter++;
                String v0 = archivisedCounter + ".";
                String v1;
                if (photo.getCategory() == null) {
                    v1 = "No category assigned";
                } else {
                    v1 = photo.getCategory().getName();
                }

                String v2 = photo.getPath();
                String v3 = photo.getResolution();
                String v4 = photo.getDescription();
                String v5 = photo.getFormat();
                String v6 = getDevicesNames(photo);
                tablesup.addCell(v0);
                tablesup.addCell(v1);
                tablesup.addCell(v2);
                tablesup.addCell(v3);
                tablesup.addCell(v4);
                tablesup.addCell(v5);
                tablesup.addCell(v6);

            }
        }

        document.add(tablesup);

    }

    /**
     * Method preparing main body of report and inserting data specific for
     * chosen report type.
     *
     * @throws Exception
     */
    private void prepareReport() throws Exception {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();

        Document document = new Document();
        document.setMargins(2.0f, 2.0f, 4.0f, 4.0f);
        Date date = new Date();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
        String file = "Report-" + dateFormat.format(date) + ".pdf";
        PdfWriter.getInstance(document, new FileOutputStream(getFileTargetPath(file)));
        document.open();
        Paragraph paragraph = new Paragraph("Report based on " + getReportType(),
                FontFactory.getFont(FontFactory.TIMES_BOLD, 18, Font.BOLD, BaseColor.BLACK));
        paragraph.setAlignment(Element.ALIGN_CENTER);
        document.add(paragraph);
        paragraph = new Paragraph("Generated by " + currentUser.getUserName());
        paragraph.setAlignment(Element.ALIGN_CENTER);
        document.add(paragraph);
        paragraph = new Paragraph(new Date().toString());
        paragraph.setAlignment(Element.ALIGN_CENTER);
        document.add(paragraph);
        paragraph = new Paragraph("\n \n");
        paragraph.setAlignment(Element.ALIGN_CENTER);
        document.add(paragraph);

        String reportType = getReportType();
        switch (reportType) {
            case "device": {
                prepareReportForDevice(session, document);
                break;
            }
            case "archived": {
                prepareReportArchive(session, document);
                break;
            }
            case "category": {
                prepareReportForCategory(session, document);
                break;
            }
            default:
                break;
        }

        document.close();
        session.getTransaction()
                .commit();
        session.close();
    }

    /**
     * Method preparing report content for report based on category.
     *
     * @param session
     * @param document
     * @throws Exception
     */
    private void prepareReportForCategory(Session session, Document document) throws Exception {

        PdfPTable tablesup = new PdfPTable(6);
        tablesup.addCell("Lp.");
        tablesup.addCell("Path");
        tablesup.addCell("Resolution");
        tablesup.addCell("Description");
        tablesup.addCell("Format");
        tablesup.addCell("Device name");

        Query query = session.createQuery("from Category");
        java.util.List<Category> categories = new ArrayList<>();
        categories = query.list();

        PdfPCell cell = new PdfPCell(new Paragraph("Photos without category"));
        cell.setColspan(8);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setBackgroundColor(BaseColor.LIGHT_GRAY);
        tablesup.addCell(cell);

        Query queryPhoto = session.createQuery("from Photo where Category_idc = null");
        List<Photo> photoList = new ArrayList<>();
        photoList = queryPhoto.list();
        int photoCount = 0;
        for (Photo photoEl : photoList) {
            photoCount++;
            String v0 = photoCount + ".";
            String v1 = photoEl.getPath();
            String v3 = photoEl.getResolution();
            String v4 = photoEl.getDescription();
            String v5 = photoEl.getFormat();
            String v6 = getDevicesNames(photoEl);
            tablesup.addCell(v0);
            tablesup.addCell(v1);
            tablesup.addCell(v3);
            tablesup.addCell(v4);
            tablesup.addCell(v5);
            tablesup.addCell(v6);
        }
        for (Category category : categories) {
            cell = new PdfPCell(new Paragraph(category.getName()));
            cell.setColspan(8);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBackgroundColor(BaseColor.LIGHT_GRAY);
            tablesup.addCell(cell);

            Set<Photo> photos = category.getPhotos();
            Iterator<Photo> iterator = photos.iterator();
            int unarchivisedCounter = 0;
            while (iterator.hasNext()) {
                Photo photo = iterator.next();

                unarchivisedCounter++;
                String v0 = unarchivisedCounter + ".";
                String v1 = photo.getPath();
                String v3 = photo.getResolution();
                String v4 = photo.getDescription();
                String v5 = photo.getFormat();
                String v6 = getDevicesNames(photo);
                tablesup.addCell(v0);
                tablesup.addCell(v1);
                tablesup.addCell(v3);
                tablesup.addCell(v4);
                tablesup.addCell(v5);
                tablesup.addCell(v6);

            }

        }
        document.add(tablesup);
    }

    /**
     * Method handling directory selection.
     *
     * @param file
     * @return
     */
    private String getFileTargetPath(String file) {
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Choose target directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            return chooser.getSelectedFile() + "/" + file;

        }
        return null;
    }

    /**
     * Method return string with all devices containing given photo.
     *
     * @param photo
     * @return
     */
    private String getDevicesNames(Photo photo) {
        Set<Device> devices = photo.getDevices();
        StringBuilder devicesNames = new StringBuilder("");
        for (Device device : devices) {
            devicesNames.append(device.getName());
            devicesNames.append(" ");

        }
        return devicesNames.toString();
    }

}
