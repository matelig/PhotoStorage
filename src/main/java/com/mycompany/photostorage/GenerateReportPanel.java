/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.photostorage;

import com.mycompany.photostorage.entity.Photo;
import com.mycompany.photostorage.entity.User;
import com.mycompany.photostorage.model.CurrentUser;
import com.mycompany.photostorage.util.HibernateUtil;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Set;
import javax.swing.JOptionPane;
import org.hibernate.Query;
import org.hibernate.Session;
import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.mycompany.photostorage.entity.Device;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.stream.Stream;

/**
 *
 * @author alachman
 */
public class GenerateReportPanel extends javax.swing.JPanel {

    private CurrentUser currentUser;

    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
            Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.BOLD);

    /**
     * Creates new form GenerateReportPanel
     */
    public GenerateReportPanel(CurrentUser user) {
        this.currentUser = user;
        initComponents();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        radioBtnCategory = new javax.swing.JRadioButton();
        radioBtnArchived = new javax.swing.JRadioButton();
        radioBtnDevice = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnGenerate = new javax.swing.JButton();

        jLabel2.setText("Choose report type");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Generate report");
        jLabel1.setPreferredSize(new java.awt.Dimension(82, 20));

        buttonGroup.add(radioBtnCategory);
        radioBtnCategory.setText("category");

        buttonGroup.add(radioBtnArchived);
        radioBtnArchived.setText("archived");

        buttonGroup.add(radioBtnDevice);
        radioBtnDevice.setText("device");
        radioBtnDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnDeviceActionPerformed(evt);
            }
        });

        btnGenerate.setText("Generate report");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(206, 206, 206)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGenerate)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(radioBtnDevice)
                        .addGap(18, 18, 18)
                        .addComponent(radioBtnCategory)
                        .addGap(18, 18, 18)
                        .addComponent(radioBtnArchived)))
                .addContainerGap(163, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioBtnCategory)
                    .addComponent(radioBtnArchived)
                    .addComponent(radioBtnDevice))
                .addGap(38, 38, 38)
                .addComponent(btnGenerate)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void radioBtnDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnDeviceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioBtnDeviceActionPerformed

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        if (buttonGroup.getSelection() == null) {
            JOptionPane.showMessageDialog(this,
                    "You have to select report type",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this,
                    "This is a very nice report!",
                    "Report",
                    JOptionPane.INFORMATION_MESSAGE);
            prepareReport();
        }
    }//GEN-LAST:event_btnGenerateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerate;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton radioBtnArchived;
    private javax.swing.JRadioButton radioBtnCategory;
    private javax.swing.JRadioButton radioBtnDevice;
    // End of variables declaration//GEN-END:variables

    private void prepareReport() {
        try {
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();

            Document document = new Document();
            Date date = new Date();
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
            String file = "Report-" + dateFormat.format(date) + ".pdf";
            PdfWriter.getInstance(document, new FileOutputStream(file));
            document.open();

            document.add(new Paragraph("Report based on " + getReportType(), FontFactory.getFont(FontFactory.TIMES_BOLD, 18, Font.BOLD, BaseColor.BLUE)));
            document.add(new Paragraph("Generated by " + currentUser.getUserName()));
            document.add(new Paragraph(new Date().toString()));
            document.add(new Paragraph("----------------------------------------------------------------------------------------------------------------"));

            PdfPTable tablesup = new PdfPTable(6);
            tablesup.addCell("Lp.");
            tablesup.addCell("Category");
            tablesup.addCell("Path");
            tablesup.addCell("Resolution");
            tablesup.addCell("Description");
            tablesup.addCell("Format");

            Query sessionQuery = session.createQuery("from Device");
            java.util.List<Device> devices = new ArrayList<>();
            devices = sessionQuery.list();

            for (Device device : devices) {
                PdfPCell cell = new PdfPCell(new Paragraph(device.getName()));
                cell.setColspan(8);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setBackgroundColor(BaseColor.CYAN);
                tablesup.addCell(cell);

                Set<Photo> photosOnDevice = device.getPhotos();
                photosOnDevice.stream().filter((photo
                        -> photo.getUser().getIdu().equals(currentUser.getUserID())));
                Iterator<Photo> iterator = photosOnDevice.iterator();
                int photoCounter = 0;
                while (iterator.hasNext()) {
                    try {
                        Photo photo = iterator.next();
                        photoCounter++;
                        String v0 = photoCounter + ".";
                        String v1;
                        if (photo.getCategory() == null) {
                            v1 = "No category assigned";
                        } else {
                            v1 = photo.getCategory().getName();
                        }

                        String v2 = photo.getPath();
                        String v3 = photo.getResolution();
                        String v4 = photo.getDescription();
                        String v5 = photo.getFormat();
                        tablesup.addCell(v0);
                        tablesup.addCell(v1);
                        tablesup.addCell(v2);
                        tablesup.addCell(v3);
                        tablesup.addCell(v4);
                        tablesup.addCell(v5);

                    } catch (Exception e) {
                        System.out.println("Exception: " + e.getLocalizedMessage());
                    }
                }
            }
            document.add(tablesup);
            document.close();
            session.getTransaction().commit();
            session.close();
        } catch (Exception e) {
            System.out.println("Exception: " + e.getLocalizedMessage());
        }
    }

    private String getReportType() {
        if (radioBtnDevice.isSelected()) {
            return "device";
        } else if (radioBtnArchived.isSelected()) {
            return "archived";
        } else if (radioBtnCategory.isSelected()) {
            return "category";
        }
        return "";
    }

}
