/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.photostorage;

import com.mycompany.photostorage.entity.Device;
import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Set;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.border.Border;

/**
 * JPanel diplaying single photo in View Panel
 * @author Wojtek
 */
public class SinglePhotoPanel extends javax.swing.JPanel {

    private int photoID;
    private BufferedImage image;
    private Border blackBorder = BorderFactory.createLineBorder(Color.BLACK, 2);
    private Boolean isChecked = false;
    private Border emptyBorder = BorderFactory.createEmptyBorder(2, 2, 2, 2);

    /**
     * Creates new form SinglePhotoPanel
     */
    public SinglePhotoPanel() {
        initComponents();
        setBorder(emptyBorder);
        setImageMiniature();
        photoNameLabel.setText("Wódz wspaniały");
    }

    /**
     * Constructor
     * @param photo array of photo's bytes
     * @param description photo's description
     * @param id photo's id
     * @param isArchivised is photo archived
     * @param photoOnDevice set of devices having this photo
     */
    public SinglePhotoPanel(byte[] photo, String description, int id, byte isArchivised,Set<Device> photoOnDevice) {
        initComponents();
        this.photoID = id;
        int devicesNumber = photoOnDevice.size();
        setBorder(emptyBorder);
        jLayeredPane1.moveToFront(jPanel1);
        if (isArchivised == 1 && devicesNumber!=0) {
            jPanel1.setBackground(Color.green);
        } else if (isArchivised == 1 && devicesNumber==0) {
            jPanel1.setBackground(Color.red);
        } else if (isArchivised==0) {
            jPanel1.setVisible(false);
        }        
        setImageMiniature(photo);
        photoNameLabel.setText(description);
    }

    /**
     * sets miniature displayed in JPanel
     */
    private void setImageMiniature() {
        try {
            image = ImageIO.read(new File("src/Photo.png"));
            ImageIcon icon = new ImageIcon();
            icon.setImage(image);
            Image image = icon.getImage();
            image = image.getScaledInstance(90, 90, Image.SCALE_SMOOTH);
            icon = new ImageIcon(image);
            photoImage.setIcon(icon);
        } catch (IOException ex) {

        }
    }

    /**
     * sets miniature displayed in JPanel
     * @param photo array of photo's bytes
     */
    private void setImageMiniature(byte[] photo) {
        try {
            InputStream in = new ByteArrayInputStream(photo);
            image = ImageIO.read(in);
            ImageIcon icon = new ImageIcon();
            icon.setImage(image);
            Image image = icon.getImage();
            image = image.getScaledInstance(90, 90, Image.SCALE_SMOOTH);
            icon = new ImageIcon(image);
            photoImage.setIcon(icon);
        } catch (IOException ex) {

        }
    }

    /** 
     * 
     * @return true if given photo has been clicked
     */
    public boolean isChecked() {
        return this.isChecked;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jPanel1 = new javax.swing.JPanel();
        photoNameLabel = new javax.swing.JLabel();
        photoImage = new javax.swing.JLabel();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        jLayeredPane1.setBackground(new java.awt.Color(51, 255, 51));

        jPanel1.setBackground(new java.awt.Color(0, 255, 102));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel1MouseEntered(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );

        photoNameLabel.setText("Name");
        photoNameLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                photoNameLabelMouseEntered(evt);
            }
        });

        jLayeredPane1.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(photoNameLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(photoImage, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(photoNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
            .addComponent(photoImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 76, Short.MAX_VALUE)))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addComponent(photoImage, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(photoNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 105, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * event that allowed to sidplay full description if mouse cursor enter the field
     * @param evt 
     */
    private void photoNameLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_photoNameLabelMouseEntered
        photoNameLabel.setToolTipText(photoNameLabel.getText());
    }//GEN-LAST:event_photoNameLabelMouseEntered

    /**
     * event that colour the border if photo is clicked
     * @param evt 
     */
    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        // TODO add your handling code here:
        if (!isChecked) {
            setBorder(blackBorder);
        } else {
            setBorder(emptyBorder);
        }
        isChecked = !isChecked;
    }//GEN-LAST:event_formMouseReleased

    /**
     * Display string information about archivised photos, if mouse cursor is above colored square
     * @param evt 
     */
    private void jPanel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseEntered
        if (jPanel1.getBackground()==Color.green) 
            jPanel1.setToolTipText("This photo has been archivised.");
        else if (jPanel1.getBackground()==Color.red) 
            jPanel1.setToolTipText("Photo has been archivised, but device was deleted.");
    }//GEN-LAST:event_jPanel1MouseEntered


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel photoImage;
    private javax.swing.JLabel photoNameLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the photoID
     */
    public int getPhotoID() {
        return photoID;
    }
}
